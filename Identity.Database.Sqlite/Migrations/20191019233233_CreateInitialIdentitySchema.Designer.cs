// <auto-generated />
using System;
using Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Identity.Database.Sqlite.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20191019233233_CreateInitialIdentitySchema")]
    partial class CreateInitialIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Identity.Data.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_identitydata_approle_id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("uix_identitydata_approle_normalizedname");

                    b.ToTable("app_role","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("pk_identitydata_approleclaim_id");

                    b.HasIndex("RoleId")
                        .HasName("ix_identitydata_approleclaim_roleid");

                    b.ToTable("app_role_claim","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_username")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_identitydata_appuser_id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("ix_identitydata_appuser_normalizedemail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("uix_identitydata_appuser_normalizedusername");

                    b.ToTable("app_user","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("pk_identitydata_appuserclaim_id");

                    b.HasIndex("UserId")
                        .HasName("ix_identitydata_appuserclaim_userid");

                    b.ToTable("app_user_claim","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_identitydata_appuserlogin_loginproviderkey");

                    b.HasIndex("UserId")
                        .HasName("ix_identitydata_appuserlogin_userid");

                    b.ToTable("app_user_login","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identitydata_appuserrole_useridroleid");

                    b.HasIndex("RoleId")
                        .HasName("ix_identitydata_appuserrole_roleid");

                    b.HasIndex("UserId")
                        .HasName("ix_identitydata_appuserrole_userid");

                    b.ToTable("app_user_role","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identitydata_appusertoken_loginproviderkey");

                    b.HasIndex("UserId")
                        .HasName("ix_identitydata_appusertoken_userid");

                    b.ToTable("app_user_token","identity_data");
                });

            modelBuilder.Entity("Identity.Data.Models.AppRoleClaim", b =>
                {
                    b.HasOne("Identity.Data.Models.AppRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_identitydata_approleclaim_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserClaim", b =>
                {
                    b.HasOne("Identity.Data.Models.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identitydata_appuserclaim_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserLogin", b =>
                {
                    b.HasOne("Identity.Data.Models.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identitydata_appuserlogin_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserRole", b =>
                {
                    b.HasOne("Identity.Data.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_identitydata_approle_roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Data.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identitydata_appuserrole_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.Data.Models.AppUserToken", b =>
                {
                    b.HasOne("Identity.Data.Models.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_identitydata_appusertoken_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
